apiVersion: v1
kind: ServiceAccount
metadata:
  name: rocksbotbackend
  namespace: $NAMESPACE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: rocksbot-${ENV_NAME}
    timestamp: ${TIMESTAMP}
  name: rocksbot-${ENV_NAME}
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rocksbot-${ENV_NAME}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rocksbot-${ENV_NAME}
        beat-log-label: rocksbot-${ENV_NAME}-log
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: rocksbot-secrets-${ENV_NAME}
        - configMapRef:
            name: rocksbot-envs-${ENV_NAME}           
        image: 245763787462.dkr.ecr.eu-central-1.amazonaws.com/rocksbot/backend:${ENV_NAME}
        imagePullPolicy: Always
        name: rocksbot-${ENV_NAME}
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 10m
            memory: 100Mi
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: regcred
      restartPolicy: Always
      securityContext: {}
      serviceAccount: rocksbotbackend
      serviceAccountName: rocksbotbackend
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: rocksbot-${ENV_NAME}
  namespace: $NAMESPACE
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: rocksbot-${ENV_NAME}
  type: ClusterIP
status:
  loadBalancer: {}